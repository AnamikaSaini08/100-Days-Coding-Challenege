class Solution {
public:
    void solve(int ind , int jind , long long target , vector<int>&nums ,   vector<vector<int>>&ans)
    {
        int i = jind+1 , j = nums.size()-1;
        while(i<j)
        {
            long long sum = nums[i] + nums[j];
            if(sum == target)
            {
                ans.push_back({nums[ind] , nums[jind] , nums[i] , nums[j]});
                i++ ; j--;
                while(i<j and nums[i] == nums[i-1])
                    i++;
                while(i<j and nums[j] == nums[j+1])
                    j--;
            }
            else if(sum > target)
                j--;
            else
                i++;
        }
    }
    vector<vector<int>> fourSum(vector<int>& nums, int target) 
    {
        vector<vector<int>>ans;
        if(nums.size() < 4)
            return ans;
        
        sort(nums.begin() , nums.end());
        
        for(int i= 0; i<nums.size()-3 ; i++)
        { 
            for(int j=i+1 ; j<nums.size()-2 ; j++)
            {
                solve(i , j , (long long)(target - (long long)(nums[i] + nums[j])) , nums , ans);
                while(j<nums.size()-2 and nums[j] == nums[j+1])
                    j++;
            }
            while(i<nums.size()-3 and nums[i] == nums[i+1])
                i++;
        }
        return ans;
    }
};
